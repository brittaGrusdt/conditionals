////////////  SET PARAMETERS  /////////////////
// var sigma = data["sigma"][0]
var n_tables = data["n_tables"][0]
var verbose = data["verbose"][0]
var noisy_or_beta = data["nor_beta"][0]
var noisy_or_theta = data["nor_theta"][0]
var param_nor_beta = data["param_nor_beta"][0]
var param_nor_theta = data["param_nor_theta"][0]
var rounded_digits = 7

var thresholds = {t: 0.899, f: 0.0499, theta: 0.899, theta_maybe : 0.499}

var vars = [["A", "-A"], ["C", "-C"]]

// Helper --------------------------------------------------------------------
var negate = function(x){
  return x.startsWith("-") ? x.slice(1) : "-" + x
}

var roundToN = cache(function(x){
  var m = Math.pow(10, rounded_digits)
  return Math.round(x*m)/m
}, 10000)

var combinations = Infer({model:function(){
  var bools = repeat(vars.length, flip)
  var tokens = mapIndexed(function(idx, b){
    b ? uniformDraw(vars[idx]) : ""
  }, bools)
  return filter(function(t){t.length>0}, tokens)
}}).support()
var combinations = filter(function(x){x.length > 0}, combinations)

var combine_pairs = function(connective){
  var pairs_list = mapIndexed(function(idx, tokens1){
    var arr = filter(function(tokens){
      all(function(x){
        tokens.indexOf(x) == -1 && tokens.indexOf(negate(x)) == -1
      }, tokens1)
    }, combinations.slice(idx+1))

    var antecedent = tokens1.join(" and ")
    var ifs = map(function(tokens2){
      antecedent + connective + tokens2.join(" and ")
    }, arr)

    var ifs_rev = map(function(tokens2){
      tokens2.join(" and ") + connective + antecedent
    }, arr)
    return ifs.concat(ifs_rev)
  }, combinations)

  var pairs = reduce(function(arr, acc){
    acc.concat(arr)
  }, [], pairs_list)
  return pairs
}

var intersect_arrays = function(arrays){
  return filter(function(m){
          var m_in_all_lists = map(function(idx){arrays[idx].includes(m)},
                                  _.range(1,arrays.length))
          return sum(m_in_all_lists)==m_in_all_lists.length
    }, arrays[0])
}

// Causal networks  ----------------------------------------------------------
var dependent_nets = combine_pairs(" implies ")
var causal_nets = ["A || C"].concat(dependent_nets)

// Probabilities ------------------------------------------------------------
var marginal = cache(function(table, variables){
  // computes the probability of P(A) marginalized over all other variables in
  // support of table
  // args: table: distribution over strings, e.g. {support: ["AC", "A-C", ..]}
  //       variables:list of strings, e.g.["A"]
  var tokens = table.support()
  var all_x = map(function(v){
    v.includes("-") ? filter(function(k){k.includes(v)}, tokens) :
                      filter(function(k){!k.includes("-"+v)}, tokens)
  }, variables)
  var xs = intersect_arrays(all_x)

  return reduce(function(x, acc){acc + Math.exp(table.score(x))}, 0, xs)
})

// States --------------------------------------------------------------------
var build_table_functions = {
  "A/-A implies" : cache(function(c_a, c_na, a){
                          return {"AC": roundToN(c_a * a),
                                  "A-C": roundToN((1-c_a) * a),
                                  "-AC": roundToN(c_na * (1-a)),
                                  "-A-C": roundToN((1-c_na) * (1-a))
                                 }
                         }),
  "C/-C implies" : cache(function(a_c, a_nc, c){
                          return {"AC": roundToN(a_c * c),
                                  "A-C": roundToN(a_nc * (1-c)),
                                  "-AC": roundToN((1-a_c) * c),
                                  "-A-C": roundToN((1-a_nc) * (1-c))
                                 }
                         }),

  "||" : cache(function(a, c, ac){
          var x = (ac+a-ac+c-ac)
          var last = x >= 1 ? 0 : 1-x
          display(last)
          var table = [ac, a-ac, c-ac, last]
          display(table)
          return {"AC": table[0], "A-C": table[1],
                  "-AC": table[2], "-A-C": table[3]}
          })
}

var truncate_normal = function(cell, limit){
  var distr = Infer({method:"rejection", model:function(){
    var x = gaussian({mu:cell, sigma:0.001})
    condition(x>0 && x < limit)
    return x
  }})
  sample(distr)
}

var make_tables = cache(function(cn){
  var build_table = cn.includes(" || ") ? build_table_functions["||"] :
                      cn.startsWith("A") || cn.startsWith("-A") ?
                        build_table_functions["A/-A implies"] :
                        build_table_functions["C/-C implies"]
  var n = cn=="A || C" ? n_tables * 8 : n_tables

  var table_distributions =
    Infer({method:'forward', samples:n, model:function(){
      var beta_i = !noisy_or_beta ? beta(1, param_nor_beta) : noisy_or_beta
      var theta_i = !noisy_or_theta ? beta(param_nor_theta, 1) : noisy_or_theta

      var child_p = theta_i + beta_i - (beta_i * theta_i)
      var child_np = beta_i
      var parent = beta(1, 1)
      var parent2 = beta(1,1)

      var probs =
        cn=="A || C" ? [parent, parent2, truncate_normal(parent*parent2,
          Math.min(parent, parent2))] :
        cn=="A implies C" || cn=="C implies A" ? [child_p, child_np, parent] :
        cn=="A implies -C" || cn=="C implies -A" ?
          [1-child_p, 1-child_np, parent] :
        cn=="-A implies C" || cn=="-C implies A" ?
          [child_np, child_p, 1-parent] :
        cn=="-A implies -C" || cn=="-C implies -A" ?
          [1-child_np, 1-child_p, 1-parent] :
        error("unknown causal network " + cn)

      var table = cn=="A || C" ? build_table(probs[0], probs[1], probs[2])
                                 : build_table(probs[0], probs[1], probs[2])

      return Categorical({"vs": _.keys(table),"ps": _.values(table)})
  }}).support()
  return table_distributions
}, 10000)

var tables = map(function(cn){
  var tables_cn = make_tables(cn)
  map(function(t){t["params"]["ps"].concat(cn)}, tables_cn)
}, causal_nets)

var obj = {"tables": tables, "cns": causal_nets}
obj
