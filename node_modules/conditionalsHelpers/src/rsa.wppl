// Model ---------------------------------------------------------------------
var literal_listener = cache(function(utterance, bias){
  Infer({method:'enumerate',model: function(){
    var state = sample(globalStore.state_prior)
    condition(meaning(utterance, state["bn"]["table"]))

    if(bias == "pizza"){
      if(globalStore.speaker_intents.indexOf("ISA") != -1 &&
         globalStore.speaker_intents.indexOf("PA") != -1){

           var val = (utterance == "A > C") ? 0.8 : 0.2
           var t = state["intention"]=="ISA" ? val : 1-val
           factor(Math.log(t))
         }
    }
    return state
  }})
}, 10000)

var speaker = cache(function(state, bias, displayU){
  return Infer({method:'enumerate', model: function(){
    var utterance = uniformDraw(globalStore.utterances)
    var ll = literal_listener(utterance, bias)
    var utility = ll.score(state)
    // utility == -Infinity ? utility : globalStore.alpha * (utility-costs(utterance))

    if(displayU && utility!=-Infinity){
      display(utterance + utility)
    }
    factor(globalStore.alpha * (utility - costs(utterance)))
    return utterance
  }
 })
}, 10000)

var listener = function(utterance, bias){
  return Infer({method:'enumerate', model:function(){
                  var state = sample(globalStore.state_prior)
                  // var intention = uniformDraw(globalStore.speaker_intents)
                  var sp = speaker(state, bias, false)
                  observe(sp, utterance)
                  return state
                }})
}
