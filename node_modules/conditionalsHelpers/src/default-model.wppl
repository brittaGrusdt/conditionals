// Parameters ----------------------------------------------------------------
var thresholds = {t: 0.899, f: 0.0499, theta: 0.899, theta_likely : 0.499}

// State prior  --------------------------------------------------------------
var cn_prior = function(bias) {
  var p_ind = p_ac_ind[bias]
  var p_dep = (1 - p_ind) / (globalStore.cns.length - 1)
  var ps = map(function(cn){cn == "A || C" ?  p_ind : p_dep}, globalStore.cns)
  return categorical({vs: globalStore.cns, ps: ps})
}

var log_likelihood = function(state){
  var p = cn_to_prob(state)
  return state.cn == "A || C" ?
          Gaussian({mu:p[0]*p[1], sigma: globalStore.indep_sigma}).score(p[2]) :
          (Beta({a:10, b:1}).score(p[0]) + Beta({a:1, b:10}).score(p[1]))
}

var state_prior = cache(function(bias){
  var distr = Infer({method:'enumerate', model:function(){
    var table = uniformDraw(globalStore.Tables)
    var state = {"table": table,
                 "cn": uniformDraw(globalStore.cns)}
                 // "cn": cn_prior(bias)}
    factor(log_likelihood(state))

    var intention = uniformDraw(globalStore.speaker_intents)
    if(bias=='lawn'){
      var pc_na = Math.exp(table.score("-AC")) / marginal(table, ["-A"])
      condition(pc_na >= 0.25)
    } else if(bias=="pizza"){
      condition(state.cn == "A || C")
    } else if(bias == "dutchman"){
      condition(marginal(state.table, ["C"]) <= thresholds.f)
    }
    return {"bn": state, "intention": intention}
  }})

  // make sure that states that have almost 0-probability are excldued,
  // otherwise these states face a problem for the speaker who cannot say
  // anything because the log of the literal listener will always be -Infinity
  return Infer({model:function(){
    var s = sample(distr)
    condition(Math.exp(distr.score(s)) > 0.0000011)
    return s
  }})
})


// Meaning ------------------------------------------------------------------
var meaning = cache(function(utterance, table){
 var p = utterance_probs(utterance, table)
 var u_applicable = utterance.includes('likely') ?
                      (p >= thresholds.theta_likely) : p >= thresholds.theta
// utterance.includes(">") ? ((p >= degree - 0.025) & (p <= degree + 0.025)) :  p >= thresholds.theta
 return u_applicable
})

// Model ---------------------------------------------------------------------
var literal_listener = cache(function(utterance, bias){
  Infer({method:'enumerate',model: function(){
    var state = sample(state_prior(bias))["bn"]
    condition(meaning(utterance, state.table))

    var speaker_intent = uniformDraw(globalStore.speaker_intents)

    // if(bias == "pizza"){
    //   var val = utterance.indexOf(">") != -1 ? 0.8 : 0.2
    //   var t = speaker_intent=="ISA" ? val : 1-val
    //   factor(Math.log(t))
    // }

    return {"bn": state, "intention": speaker_intent}
  }})
}, 10000)

var costs = cache(function(utt){
  if(globalStore.utterances.indexOf(utt)== -1){error('unknown utterance ' + utt)}
  var c1 = utt.includes(' > ') ? globalStore.cost_conditional : 0
  var c2 = (utt.split(' and ').length - 1) * (globalStore.cost_conditional/2)
  var c3 = utt.split('-').length > 1 ?  (globalStore.cost_conditional/4) : 0
  var c4 = utt.includes('likely') ? (globalStore.cost_conditional/5) : 0
  return c1 + c2 + c3 + c4
}, 10000)

var speaker = cache(function(bn, intention, bias, displayU){
  return Infer({method:'enumerate', model: function(){
    var utterance = uniformDraw(globalStore.utterances)
    var ll = literal_listener(utterance, bias)
    var utility = ll.score({bn, intention})
    if(displayU && utility!=-Infinity){
      display(utterance + utility)
    }
    factor(globalStore.alpha * (utility - costs(utterance)))
    return utterance
  }
 })
}, 10000)

var listener = function(utterance, bias){
  return Infer({method:'enumerate', model:function(){
                  var bn = sample(state_prior(bias))["bn"]
                  var intention = uniformDraw(globalStore.speaker_intents)
                  var sp = speaker(bn, intention, bias, false)
                  observe(sp, utterance)
                  return {"bn": bn, "intention": intention}
                }})
}
