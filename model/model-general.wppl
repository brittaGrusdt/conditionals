// Parameters ----------------------------------------------------------------
var thresholds = {t: 0.899, f: 0.0499, theta: 0.899, theta_likely : 0.499}

// -------------- INPUT DATA -----------------------//
var CAUSAL_NETS = data["cns"]
var UTTERANCES = data["utterances"]
var tables_list = data["tables"]
var degree = data["degree"][0]

var TABLES = map(function(obj){
  Categorical({"vs": obj["vs"], "ps": obj["ps"]})
}, tables_list)

// model parameters
var ALPHA = data["alpha"][0]
var BIAS = data["bias"][0]
var COST_CONDITIONAL = data["cost_conditional"][0]
var UTT = data["utt"][0]
// for bias lawn: max threshold for P(-A,C)
var threshold_cp = data["threshold_cp"] ? data["threshold_cp"][0] : 0.05
var SPEAKER_INTENTS = ["ISA", "PA"]
// var SPEAKER_INTENTS = [""]


// parameter for likelihood functions
var SIGMA = data["indep_sigma"][0]
var PARAM_NOR_THETA = data["param_nor_theta"][0]
var PARAM_NOR_BETA = data["param_nor_beta"][0]

// output parameters
var LEVEL_MAX = data["level_max"][0]
var verbose = data["verbose"][0]
// -------------- INPUT DATA -----------------------//

var vars = [["A", "-A"], ["C", "-C"]]
var p_ac_ind = {"none": 0.25,
                "lawn": 0.0,
                "pizza" : 1,
                "dutchman" : 1
                }
if(verbose){
  display('# utterances:' + UTTERANCES.length)
  display("utterance for listeners: " + UTT)
  display("cost conditional:" + COST_CONDITIONAL)
  display("cns:" + CAUSAL_NETS)
  display("bias: " + BIAS)
  display("alpha:" + ALPHA)
  display("# tables:" + tables_list.length)
  display("degree: " + degree)
}


// Helper --------------------------------------------------------------------
var intersect_arrays = cache(function(arrays){
  return filter(function(m){
          var m_in_all_lists = map(function(idx){arrays[idx].indexOf(m)!=-1},
                                  _.range(1, arrays.length))
          return sum(m_in_all_lists)==m_in_all_lists.length
    }, arrays[0])
},10000)

var negate = function(x){
  return x.startsWith("-") ? x.slice(1) : "-" + x
}

// Probabilities ------------------------------------------------------------
var marginal = cache(function(table, variables){
  // computes the probability of marginalization over all variables for table
  // args: table: categorical distribution; ps:[..] and vs:["AC", "A-C", ..]
  //       variables: list; ["A"]
  var tokens = table.support()
  var all_x = map(function(v){
    v.includes("-") ? filter(function(k){k.includes(v)}, tokens) :
                      filter(function(k){!k.includes("-"+v)}, tokens)
  }, variables)
  var xs = intersect_arrays(all_x)

  return reduce(function(x, acc){acc + Math.exp(table.score(x))}, 0, xs)
})

var conditional_probs = cache(function(table){
  return {"P(C|A)" : marginal(table, ["A", "C"]) / marginal(table, ["A"]),
          "P(C|-A)": marginal(table, ["-A", "C"]) / marginal(table, ["-A"]),
          "P(A|C)" : marginal(table, ["A", "C"]) / marginal(table, ["C"]),
          "P(A|-C)": marginal(table, ["A", "-C"]) / marginal(table, ["-C"])}
}, 10000)

var cn_to_prob = cache(function(state){
  var cn = state.cn
  var table = state.table
  var probs = conditional_probs(table)
  return cn == "A implies C" ? [probs["P(C|A)"], probs["P(C|-A)"]] :
         cn == "A implies -C" ? [1 - probs["P(C|A)"], 1 - probs["P(C|-A)"]] :
         cn == "-A implies C" ? [probs["P(C|-A)"], probs["P(C|A)"]] :
         cn == "-A implies -C" ? [1 - probs["P(C|-A)"], 1 - probs["P(C|A)"]] :
         cn == "C implies A" ? [probs["P(A|C)"], probs["P(A|-C)"]] :
         cn == "C implies -A" ? [1 - probs["P(A|C)"], 1 - probs["P(A|-C)"]] :
         cn == "-C implies A" ? [probs["P(A|-C)"], probs["P(A|C)"]] :
         cn == "-C implies -A" ? [1 - probs["P(A|-C)"], 1 - probs["P(A|C)"]] :
         cn == "A || C" ? [marginal(table, ["A"]), marginal(table, ["C"]),
                           marginal(table, ["A", "C"])] :
  error('unknown network: ' + cn)
}, 10000)

// State prior  --------------------------------------------------------------
var cn_prior = function(bias) {
  var p_ind = p_ac_ind[bias]
  var p_dep = (1 - p_ind) / (CAUSAL_NETS.length-1)
  var ps = map(function(cn){cn=="A || C" ?  p_ind : p_dep}, CAUSAL_NETS)
  return categorical({vs: CAUSAL_NETS, ps: ps})
}

var log_likelihood = function(state){
  var p = cn_to_prob(state)
  return state.cn == "A || C" ?
          Gaussian({mu:p[0]*p[1], sigma:SIGMA}).score(p[2]) :
          (Beta({a:PARAM_NOR_THETA, b:1}).score(p[0]) +
           Beta({a:1, b:PARAM_NOR_BETA}).score(p[1]))
}

var state_prior = cache(function(bias){
  var distr = Infer({method:'enumerate', model:function(){
    var state = {"table": uniformDraw(TABLES),
                 "cn": cn_prior(bias)}
    factor(log_likelihood(state))

    var intention = uniformDraw(SPEAKER_INTENTS)
    if(bias=='lawn'){
      // condition(Math.exp(state.table.score("-AC")) <= threshold_cp)
      //soft version:
      // if(Math.exp(state.table.score("-AC")) <= threshold_cp){
      //   factor(-Math.log(thresholds.f))
      // }
    } else if(bias=="pizza"){
      condition(state.cn == "A || C")
    } else if(bias == "dutchman"){
      condition(marginal(state.table, ["C"]) <= thresholds.f)
    }
    return {"bn": state, "intention": intention}
  }})

  // make sure that states that have almost 0-probability are excldued,
  // otherwise these states face a problem for the speaker who cannot say
  // anything because the log of the literal listener will always be -Infinity
  return Infer({model:function(){
    var s = sample(distr)
    condition(Math.exp(distr.score(s)) > 0.0000011)
    return s
  }})
})


// Meaning ------------------------------------------------------------------
var utterance_probs = cache(function(utterance, table){
  if(utterance.includes(">")){
    var components = utterance.split(" > ")
    var antecedent = components[0].split(" and ").join("")
    var consequent = components[1].split(" and ").join("")
    return marginal(table, [antecedent, consequent]) /
           marginal(table, [antecedent])
    // var neg_consequent = negate(consequent)
    // return marginal(table, [antecedent, neg_consequent])
  }
  else if(utterance.includes("likely")){
    var u = utterance.slice("likely ".length)
    return marginal(table, [u])
  }
  else if(utterance.includes("and")){
    var components = utterance.split(" and ")
    return marginal(table, components)
  }
  else {
    return marginal(table, [utterance])
  }
})

var meaning = cache(function(utterance, table){
 var p = utterance_probs(utterance, table)
 var u_applicable = utterance.includes('likely') ? (p >= thresholds.theta_likely) : p >= thresholds.theta

     // utterance.includes(">") ? ((p >= degree - 0.025) & (p <= degree + 0.025)) :  p >= thresholds.theta
 return u_applicable
})

// Model ---------------------------------------------------------------------
var literal_listener = cache(function(utterance, bias){
  Infer({method:'enumerate',model: function(){
    var state = sample(state_prior(bias))["bn"]
    condition(meaning(utterance, state.table))

    var speaker_intent = uniformDraw(SPEAKER_INTENTS)

    if(bias == "pizza"){
      var val = utterance.indexOf(">") != -1 ? 0.8 : 0.2
      var t = speaker_intent=="ISA" ? val : 1-val
      factor(Math.log(t))
    }

    return {"bn": state, "intention": speaker_intent}
  }})
}, 10000)

var costs = cache(function(utt){
  if(UTTERANCES.indexOf(utt)== -1){error('unknown utterance ' + utt)}
  var c1 = utt.includes(' > ') ? COST_CONDITIONAL : 0
  var c2 = (utt.split(' and ').length - 1) * (COST_CONDITIONAL/2)
  var c3 = utt.split('-').length > 1 ?  (COST_CONDITIONAL/4) : 0
  var c4 = utt.includes('likely') ? (COST_CONDITIONAL/5) : 0
  return c1 + c2 + c3 + c4
}, 10000)

var speaker = cache(function(bn, intention, bias, displayU){
  return Infer({method:'enumerate', model: function(){
    var utterance = uniformDraw(UTTERANCES)
    var ll = literal_listener(utterance, bias)
    var utility = ll.score({bn, intention})
    if(displayU && utility!=-Infinity){
      display(utterance + utility)
    }
    factor(ALPHA * (utility - costs(utterance)))
    return utterance
  }
 })
}, 10000)

var listener = function(utterance, bias){
  return Infer({method:'enumerate', model:function(){
                  var bn = sample(state_prior(bias))["bn"]
                  var intention = uniformDraw(SPEAKER_INTENTS)
                  var sp = speaker(bn, intention, bias, false)
                  observe(sp, utterance)
                  return {"bn": bn, "intention": intention}
                }})
}


// Run from R ----------------------------------------------------------------
var run = function(level){
  if(verbose){ display("run " + level + " ...") }
  return level == "prior" ? state_prior(BIAS) :
         level == "LL" ? literal_listener(UTT, BIAS) :
          listener(UTT, BIAS)
}

var prior = run("prior")
var all_states = map(function(obj){obj["bn"]}, prior.support())
if(verbose){display('# states: ' + all_states.length)}
// display('a single state:')
// display(all_states[0])

// ------ debugging ------------------ //
// var bns = filter(function(s){
//   Math.exp(s.table.score("AC"))==0.8095
// }, all_states)
// display(bns)
// speaker(bns[0], intention, "none", false) # define intention

var wrap_speaker = function(bn){
  // display(bn)
  // var intention = "PA"
  var intention = "ISA"
  speaker(bn, intention, "none", false)
}
// ------ debugging ------------------ //


// RUN MODEL
if(LEVEL_MAX == "speaker_all_bns"){
  // define speaker intentions
  var bns = filter(function(bn){
    meaning(UTT, bn.table)
  }, all_states)
  var distributions = {"speaker": map(wrap_speaker, bns)}
  distributions

} else{
  var distributions = LEVEL_MAX == "prior" ? {prior} :
                      LEVEL_MAX == "LL" ? {"prior": prior, "LL": run("LL")} :
                      LEVEL_MAX == "PL" ? {"prior": prior, "LL": run("LL"),
                                           "PL": run("PL")} :
                      error("unknown output level: " + LEVEL_MAX)

  // object to return to R
  distributions
}
